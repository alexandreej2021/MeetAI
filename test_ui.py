"""
Teste para verificar se a transcri√ß√£o aparece na interface
"""

import sys
import time
import threading
from pathlib import Path

# Adicionar o diret√≥rio src ao path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.audio.recorder import AudioRecorder
from src.ai.transcriber import Transcriber

# Simular MeetAI para testar interface
class MockMeetAI:
    def __init__(self):
        self.transcriber = Transcriber()
        
    def process_audio_simple(self, audio_file):
        """Processar √°udio como na aplica√ß√£o principal"""
        try:
            print("üìù Iniciando transcri√ß√£o...")
            transcript = self.transcriber.transcribe(audio_file)
            
            if transcript:
                print(f"‚úÖ Transcri√ß√£o obtida: {len(transcript)} caracteres")
                print(f"üìù Conte√∫do: \"{transcript}\"")
                return transcript
            else:
                print("‚ùå Transcri√ß√£o falhou")
                return None
                
        except Exception as e:
            print(f"‚ùå Erro no processamento: {e}")
            return None

def test_ui_integration():
    """Testar integra√ß√£o da transcri√ß√£o com interface"""
    print("üñ•Ô∏è TESTE DE INTEGRA√á√ÉO COM INTERFACE")
    print("=" * 60)
    
    # Criar inst√¢ncia mock
    app = MockMeetAI()
    recorder = AudioRecorder()
    
    if not app.transcriber.client:
        print("‚ùå OpenAI n√£o configurado")
        return False
    
    print("‚úÖ Componentes inicializados")
    print("üéØ Testando fluxo: Gravar ‚Üí Parar ‚Üí Transcrever ‚Üí Exibir")
    print()
    
    try:
        print("üéôÔ∏è Iniciando grava√ß√£o de teste (6 segundos)...")
        
        # Iniciar grava√ß√£o
        if not recorder.start_recording():
            print("‚ùå Falha ao iniciar grava√ß√£o")
            return False
        
        # Aguardar grava√ß√£o
        for i in range(6):
            time.sleep(1)
            print(f"   üî¥ Gravando... {i+1}/6s")
        
        # Parar grava√ß√£o
        print("üõë Parando grava√ß√£o...")
        audio_file = recorder.stop_recording()
        
        if not audio_file:
            print("‚ùå Falha ao obter arquivo de √°udio")
            return False
            
        print(f"‚úÖ Arquivo salvo: {audio_file}")
        
        # Processar √°udio (simular fluxo da aplica√ß√£o)
        print("\nüîÑ SIMULANDO FLUXO DA APLICA√á√ÉO:")
        transcript = app.process_audio_simple(audio_file)
        
        if transcript:
            print("\nüìä RESULTADO DO TESTE:")
            print(f"   - Arquivo: {audio_file}")
            print(f"   - Transcri√ß√£o: ‚úÖ SUCESSO") 
            print(f"   - Caracteres: {len(transcript)}")
            print(f"   - Palavras: {len(transcript.split())}")
            print(f"   - Conte√∫do: \"{transcript[:100]}{'...' if len(transcript) > 100 else ''}\"")
            
            print("\nüéØ FLUXO CORRETO DA APLICA√á√ÉO:")
            print("   1. Transcri√ß√£o ‚úÖ Funcionando")
            print("   2. Interface deve exibir via display_transcript_only()")
            print("   3. Resumo gerado via Gemini")
            print("   4. Interface final via display_final_results()")
            
            return True
        else:
            print("\n‚ùå FALHA NA TRANSCRI√á√ÉO")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro durante teste: {e}")
        return False
    finally:
        try:
            if recorder.recording:
                recorder.stop_recording()
        except:
            pass

if __name__ == "__main__":
    success = test_ui_integration()
    if success:
        print("\nüéâ INTEGRA√á√ÉO FUNCIONANDO!")
        print("üí° A transcri√ß√£o deve aparecer na aplica√ß√£o principal")
        print("üîß Corre√ß√µes implementadas no main.py e main_window.py") 
    else:
        print("\nüí• Teste falhou - problema na transcri√ß√£o base")

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import threading
import time
from datetime import datetime
import os
from pathlib import Path

class MeetAITest:
    def __init__(self):
        self.recording = False
        self.setup_directories()
        
        # Inicializar interface
        self.root = tk.Tk()
        self.setup_ui()
        
    def setup_directories(self):
        """Criar diret√≥rios necess√°rios"""
        directories = ['data', 'config', 'outputs', 'temp']
        for directory in directories:
            Path(directory).mkdir(exist_ok=True)
    
    def setup_ui(self):
        """Configurar interface do usu√°rio"""
        self.root.title("MeetAI - Teste (Sem APIs)")
        self.root.geometry("800x600")
        self.root.configure(bg='#f0f0f0')
        
        # Frame principal
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configurar grid
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        
        # T√≠tulo
        title_label = ttk.Label(main_frame, text="MeetAI - Modo Teste", font=('Arial', 20, 'bold'))
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 20))
        
        # Aviso
        warning_label = ttk.Label(
            main_frame, 
            text="‚ö†Ô∏è Esta √© uma vers√£o de teste. Configure as APIs para funcionalidade completa.",
            foreground='orange',
            font=('Arial', 10)
        )
        warning_label.grid(row=1, column=0, columnspan=3, pady=(0, 10))
        
        # Se√ß√£o de grava√ß√£o
        recording_frame = ttk.LabelFrame(main_frame, text="Simula√ß√£o de Grava√ß√£o", padding="10")
        recording_frame.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        recording_frame.columnconfigure(1, weight=1)
        
        # Bot√£o de grava√ß√£o
        self.record_button = ttk.Button(
            recording_frame, 
            text="‚ñ∂ Simular Grava√ß√£o", 
            command=self.toggle_recording
        )
        self.record_button.grid(row=0, column=0, padx=(0, 10))
        
        # Status
        self.status_label = ttk.Label(recording_frame, text="Pronto para simular")
        self.status_label.grid(row=0, column=1, sticky=tk.W)
        
        # Barra de progresso
        self.progress = ttk.Progressbar(
            recording_frame, 
            mode='indeterminate',
            length=200
        )
        self.progress.grid(row=0, column=2, padx=(10, 0))
        
        # Templates
        template_frame = ttk.LabelFrame(main_frame, text="Templates Dispon√≠veis", padding="10")
        template_frame.grid(row=3, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        
        self.template_var = tk.StringVar()
        template_combo = ttk.Combobox(
            template_frame,
            textvariable=self.template_var,
            values=["ATA de Reuni√£o", "Resumo de Conversa", "Resumo de Palestra", "Resumo de Entrevista", "Brainstorming"],
            state="readonly"
        )
        template_combo.grid(row=0, column=0, sticky=(tk.W, tk.E), padx=(0, 10))
        template_combo.set("Resumo de Conversa")
        template_frame.columnconfigure(0, weight=1)
        
        # Resultados
        results_frame = ttk.LabelFrame(main_frame, text="Resultados de Teste", padding="10")
        results_frame.grid(row=4, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        results_frame.columnconfigure(0, weight=1)
        results_frame.rowconfigure(1, weight=1)
        main_frame.rowconfigure(4, weight=1)
        
        # Notebook
        notebook = ttk.Notebook(results_frame)
        notebook.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(0, 10))
        
        # Aba transcri√ß√£o
        transcript_frame = ttk.Frame(notebook)
        notebook.add(transcript_frame, text="Transcri√ß√£o (Simulada)")
        
        self.transcript_text = scrolledtext.ScrolledText(
            transcript_frame,
            wrap=tk.WORD,
            height=8,
            font=('Consolas', 10)
        )
        self.transcript_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Aba resumo
        summary_frame = ttk.Frame(notebook)
        notebook.add(summary_frame, text="Resumo (Simulado)")
        
        self.summary_text = scrolledtext.ScrolledText(
            summary_frame,
            wrap=tk.WORD,
            height=8,
            font=('Arial', 10)
        )
        self.summary_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Bot√µes
        button_frame = ttk.Frame(results_frame)
        button_frame.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=(10, 0))
        
        ttk.Button(button_frame, text="üìã Testar Exemplo", command=self.load_example).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(button_frame, text="üóë Limpar", command=self.clear_results).pack(side=tk.LEFT)
        ttk.Button(button_frame, text="‚ÑπÔ∏è Configurar APIs", command=self.show_api_info).pack(side=tk.RIGHT)
    
    def toggle_recording(self):
        """Simular grava√ß√£o"""
        if not self.recording:
            self.start_simulation()
        else:
            self.stop_simulation()
    
    def start_simulation(self):
        """Iniciar simula√ß√£o"""
        self.recording = True
        self.record_button.configure(text="‚èπ Parar Simula√ß√£o")
        self.status_label.configure(text="Simulando grava√ß√£o...")
        self.progress.start(10)
        self.clear_results()
    
    def stop_simulation(self):
        """Parar simula√ß√£o"""
        self.recording = False
        self.record_button.configure(text="‚ñ∂ Simular Grava√ß√£o")
        self.status_label.configure(text="Processando simula√ß√£o...")
        self.progress.stop()
        
        # Simular processamento
        threading.Thread(target=self.simulate_processing, daemon=True).start()
    
    def simulate_processing(self):
        """Simular processamento de IA"""
        time.sleep(2)  # Simular tempo de processamento
        
        # Dados de exemplo
        sample_transcript = """
        Esta √© uma transcri√ß√£o simulada para demonstrar o funcionamento do MeetAI.
        
        Em uma reuni√£o real, este texto seria gerado automaticamente pela API do OpenAI Whisper,
        convertendo o √°udio gravado em texto com alta precis√£o.
        
        O sistema pode capturar tanto o √°udio do microfone quanto a sa√≠da do sistema,
        permitindo gravar reuni√µes virtuais, palestras, entrevistas e conversas importantes.
        
        Tempo de grava√ß√£o simulado: 30 segundos
        """
        
        template = self.template_var.get()
        sample_summary = f"""
        # {template} - Exemplo
        
        **Data:** {datetime.now().strftime('%d/%m/%Y %H:%M')}
        **Template utilizado:** {template}
        
        ## Resumo Principal
        Esta √© uma demonstra√ß√£o do sistema MeetAI. O resumo real seria gerado pela IA 
        baseado no template selecionado e no conte√∫do da transcri√ß√£o.
        
        ## Pontos Importantes
        - Sistema funcional de grava√ß√£o de √°udio
        - Interface gr√°fica intuitiva e responsiva
        - Suporte a m√∫ltiplos templates de resumo
        - Processamento ass√≠ncrono para melhor experi√™ncia
        
        ## Pr√≥ximos Passos
        1. Configure sua API Key da OpenAI
        2. Teste com √°udio real
        3. Personalize templates conforme necess√°rio
        
        ---
        üí° **Dica:** Este √© apenas um exemplo. Configure as APIs para funcionalidade completa!
        """
        
        # Atualizar interface na thread principal
        self.root.after(0, lambda: self.display_results(sample_transcript, sample_summary))
        self.root.after(0, lambda: self.status_label.configure(text="Simula√ß√£o conclu√≠da!"))
    
    def display_results(self, transcript, summary):
        """Exibir resultados"""
        self.transcript_text.delete('1.0', tk.END)
        self.summary_text.delete('1.0', tk.END)
        
        self.transcript_text.insert('1.0', transcript)
        self.summary_text.insert('1.0', summary)
    
    def load_example(self):
        """Carregar exemplo r√°pido"""
        self.display_results(
            "Exemplo de transcri√ß√£o: 'Ol√°, este √© um teste do sistema MeetAI. O √°udio est√° sendo capturado corretamente.'",
            f"# Exemplo de {self.template_var.get()}\n\nEste √© um resumo de exemplo gerado pelo sistema MeetAI.\n\n**Status:** Funcionando corretamente!\n**Template:** {self.template_var.get()}"
        )
        self.status_label.configure(text="Exemplo carregado!")
    
    def clear_results(self):
        """Limpar resultados"""
        self.transcript_text.delete('1.0', tk.END)
        self.summary_text.delete('1.0', tk.END)
    
    def show_api_info(self):
        """Mostrar informa√ß√µes sobre configura√ß√£o de APIs"""
        info = """
üîß CONFIGURA√á√ÉO DAS APIs

Para usar o MeetAI com funcionalidade completa:

1. OBTER API KEY DA OPENAI:
   ‚Ä¢ Acesse: https://platform.openai.com/
   ‚Ä¢ Crie uma conta ou fa√ßa login
   ‚Ä¢ V√° em "API Keys"
   ‚Ä¢ Clique em "Create new secret key"
   ‚Ä¢ Copie a chave gerada

2. CONFIGURAR NO MEETAI:
   ‚Ä¢ Execute: python main.py
   ‚Ä¢ Clique em "‚öô Configura√ß√µes"
   ‚Ä¢ Cole sua API Key no campo apropriado
   ‚Ä¢ Clique em "Salvar"

3. CUSTOS ESTIMADOS:
   ‚Ä¢ Transcri√ß√£o: ~$0.006 por minuto
   ‚Ä¢ Resumo: ~$0.002 por resumo
   ‚Ä¢ Total: ~$0.01 por minuto de √°udio

4. TESTAR:
   ‚Ä¢ Grave um √°udio de teste
   ‚Ä¢ Verifique se a transcri√ß√£o est√° correta
   ‚Ä¢ Ajuste templates conforme necess√°rio

‚ö†Ô∏è IMPORTANTE: Mantenha sua API Key segura!
        """
        
        messagebox.showinfo("Configura√ß√£o das APIs", info)
    
    def run(self):
        """Executar aplica√ß√£o"""
        self.root.mainloop()

def main():
    """Fun√ß√£o principal"""
    try:
        print("üöÄ Iniciando MeetAI em modo de teste...")
        print("üìù Esta vers√£o n√£o requer APIs - apenas demonstra a interface")
        print("‚öôÔ∏è Configure as APIs para funcionalidade completa\n")
        
        app = MeetAITest()
        app.run()
        
    except ImportError as e:
        print(f"‚ùå Erro de importa√ß√£o: {e}")
        print("üí° Execute: pip install -r requirements.txt")
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        messagebox.showerror("Erro", f"Erro ao inicializar: {e}")

if __name__ == "__main__":
    main()