#!/usr/bin/env python3
"""
Teste do sistema simplificado: Gravar tudo, depois transcrever com divis√£o inteligente
"""

import sys
import time
from pathlib import Path

# Adicionar o diret√≥rio src ao path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.audio.recorder import AudioRecorder
from src.ai.transcriber import Transcriber

def test_simple_sync():
    """Testar grava√ß√£o completa + transcri√ß√£o posterior"""
    print("üìπ TESTE DO SISTEMA SIMPLIFICADO")
    print("=" * 60)
    print("üéØ Objetivo: Gravar tudo primeiro, transcrever depois")
    print("‚úÖ Vantagens: Sem interrup√ß√µes, qualidade m√°xima, processamento otimizado")
    print()
    
    # Inicializar componentes
    recorder = AudioRecorder()
    transcriber = Transcriber()
    
    if not transcriber.client:
        print("‚ùå OpenAI n√£o configurado")
        return False
    
    print("‚úÖ Componentes inicializados")
    print("‚öôÔ∏è Configura√ß√µes:")
    print("   - Transcri√ß√£o simult√¢nea: DESABILITADA")
    print("   - Divis√£o autom√°tica: >15MB")
    print("   - Processamento paralelo: ATIVADO")
    print()
    
    try:
        print("üéôÔ∏è Iniciando grava√ß√£o simples (10 segundos)...")
        print("   üí¨ Fale normalmente - sem interrup√ß√µes!")
        
        # Iniciar grava√ß√£o
        if not recorder.start_recording():
            print("‚ùå Falha ao iniciar grava√ß√£o")
            return False
        
        # Aguardar sem processamento em tempo real
        for i in range(10):
            time.sleep(1)
            print(f"   üî¥ Gravando... {i+1}/10s (sem processamento)")
        
        # Parar grava√ß√£o
        print("üõë Parando grava√ß√£o...")
        audio_file = recorder.stop_recording()
        
        if not audio_file:
            print("‚ùå Falha ao salvar arquivo")
            return False
            
        print(f"‚úÖ Arquivo salvo: {audio_file}")
        
        # Agora fazer transcri√ß√£o completa
        print("\nüìù Iniciando transcri√ß√£o inteligente...")
        start_time = time.time()
        
        transcript = transcriber.transcribe(audio_file)
        
        processing_time = time.time() - start_time
        
        if transcript:
            print(f"‚úÖ Transcri√ß√£o conclu√≠da em {processing_time:.1f}s")
            print(f"üìù Resultado: \"{transcript}\"")
            print(f"üìä Caracteres: {len(transcript)}")
            print(f"üìä Palavras: {len(transcript.split())}")
            
            # Verificar se houve divis√£o
            file_size_mb = transcriber.get_file_size_mb(audio_file)
            if file_size_mb > 15:
                print(f"üì¶ Arquivo grande ({file_size_mb:.1f}MB) - Divis√£o autom√°tica usada")
            else:
                print(f"üìÑ Arquivo pequeno ({file_size_mb:.1f}MB) - Processamento direto")
            
            return True
        else:
            print("‚ùå Transcri√ß√£o falhou")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro durante o teste: {e}")
        return False
    finally:
        try:
            if recorder.recording:
                recorder.stop_recording()
        except:
            pass

if __name__ == "__main__":
    success = test_simple_sync()
    if success:
        print("\nüéâ SISTEMA SIMPLIFICADO FUNCIONANDO PERFEITAMENTE!")
        print("‚úÖ Grava√ß√£o completa sem interrup√ß√µes")
        print("‚úÖ Transcri√ß√£o inteligente com divis√£o autom√°tica")
        print("‚úÖ Qualidade m√°xima garantida")
        print("üí° Pronto para uso na aplica√ß√£o principal!")
    else:
        print("\nüí• Teste falhou - verificar configura√ß√µes")
from src.audio.recorder import AudioRecorder

def test_simple_sync():
    """Teste b√°sico de sincroniza√ß√£o"""
    print("üß™ TESTE SIMPLIFICADO DE SINCRONIZA√á√ÉO")
    print("=" * 40)
    
    recorder = AudioRecorder()
    
    print("üìã Iniciando grava√ß√£o por 10 segundos...")
    print("Fale e reproduza √°udio simultaneamente")
    print()
    
    try:
        if recorder.start_recording():
            print("‚úÖ Grava√ß√£o iniciada")
            
            # Gravar por 10 segundos
            for i in range(10):
                time.sleep(1)
                print(f"‚è∞ {i+1}s...", end=" ")
                
                # Mostrar estat√≠sticas a cada 3 segundos
                if (i+1) % 3 == 0:
                    if hasattr(recorder, 'mic_timestamps') and hasattr(recorder, 'system_timestamps'):
                        mic_count = len(recorder.mic_timestamps)
                        sys_count = len(recorder.system_timestamps)
                        print(f"| Chunks: Mic={mic_count}, Sys={sys_count}")
                    else:
                        print("| Coletando dados...")
                else:
                    print()
            
            print("\nüõë Parando grava√ß√£o...")
            filename = recorder.stop_recording()
            
            if filename:
                print(f"üìÅ Arquivo salvo: {filename}")
                
                # Estat√≠sticas finais
                if hasattr(recorder, 'mic_timestamps') and hasattr(recorder, 'system_timestamps'):
                    print(f"\nüìä ESTAT√çSTICAS FINAIS:")
                    print(f"Chunks do microfone: {len(recorder.mic_timestamps)}")
                    print(f"Chunks do sistema: {len(recorder.system_timestamps)}")
                    
                    if len(recorder.mic_timestamps) > 0 and len(recorder.system_timestamps) > 0:
                        diff_chunks = abs(len(recorder.mic_timestamps) - len(recorder.system_timestamps))
                        print(f"Diferen√ßa de chunks: {diff_chunks}")
                        
                        if diff_chunks < 5:
                            print("‚úÖ RESULTADO: Sincroniza√ß√£o excelente!")
                        elif diff_chunks < 10:
                            print("‚ö†Ô∏è  RESULTADO: Sincroniza√ß√£o aceit√°vel")
                        else:
                            print("‚ùå RESULTADO: Sincroniza√ß√£o precisa melhorar")
                else:
                    print("‚ö†Ô∏è  N√£o foi poss√≠vel coletar estat√≠sticas de timing")
            else:
                print("‚ùå Erro ao salvar arquivo")
        else:
            print("‚ùå Falha ao iniciar grava√ß√£o")
    
    except Exception as e:
        print(f"‚ùå Erro durante o teste: {e}")

if __name__ == "__main__":
    test_simple_sync()